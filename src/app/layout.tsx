// src/app/layout.tsx
import { SpeedInsights } from "@vercel/speed-insights/next";
import { Analytics } from "@vercel/analytics/react";
import type { Metadata } from "next";
import { Inter as FontSans } from "next/font/google";
import "./globals.css";
import { cn } from "@/lib/utils";
import { ThemeProvider } from "@/components/theme-provider"; 
// import { Sidebar } from "@/components/sidebar"; // Sigue comentado
import { Providers } from "@/app/Providers"; 
// import Header from "@/components/Header"; // Sigue comentado
import { ClientOnly } from "@/components/ClientOnly"; 

const fontSans = FontSans({
  subsets: ["latin"],
  variable: "--font-sans",
});

export const metadata: Metadata = {
  title: "AccessPoint Control",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="es" suppressHydrationWarning className="h-full">
      <body
        className={cn(
          "h-full bg-background font-sans antialiased overflow-hidden",
          fontSans.variable
        )}
      >
        <Providers>
          <ThemeProvider
            attribute="class"
            defaultTheme="light" 
            disableTransitionOnChange 
            // enableSystem={false} // Mantenemos esto simple
          >
            {/* Envolver el hijo de ThemeProvider con ClientOnly */}
            <ClientOnly fallback={<div /> /* Fallback es ahora un div completamente vacío */}>
              <div data-testid="theme-provider-child">Test</div>
            </ClientOnly>
            {/* El {children} original está comentado para esta prueba.
              Si esto funciona, el siguiente paso sería reintroducir la estructura
              original (con Header, main, children) DENTRO de ClientOnly.
            */}
          </ThemeProvider>
        </Providers>
        <Analytics />
        <SpeedInsights />
      </body>
    </html>
  );
}
