// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum RoleUsuario {
  ADMIN
  TECNICO
  VISUALIZADOR
  CLIENTE
}

enum EstadoEmpresa {
  ACTIVA
  INACTIVA
}

// --- NUEVO ENUM AÑADIDO ---
enum EstadoContacto {
  ACTIVO
  INACTIVO
}

enum PrioridadTicket {
  BAJA
  MEDIA
  ALTA
  URGENTE
}

enum EstadoTicket {
  ABIERTO
  EN_PROGRESO
  PENDIENTE_TERCERO
  PENDIENTE_CLIENTE
  RESUELTO
  CERRADO
  CANCELADO
}

enum TipoAccion {
  INICIAL
  SEGUIMIENTO
  DIAGNOSTICO
  CONEXION_REMOTA
  ENVIO_EQUIPO
  RECEPCION_EQUIPO
  CIERRE_ADMINISTRATIVO
  FINAL
}

enum TipoEquipoInventario {
  VTS
  BIARTIC
  NOTEBOOK
  CELULAR
  TABLET
  IMPRESORA
  MONITOR
  PERIFERICO
  OTRO
}

enum EstadoEquipoInventario {
  DISPONIBLE
  EN_USO_INTERNO
  PRESTADO
  EN_MANTENIMIENTO
  DE_BAJA
  PERDIDO_ROBADO
}

enum EstadoPrestamoEquipo {
  PRESTADO
  DEVUELTO
  ATRASADO
  RENOVADO
  PERDIDO_POR_CLIENTE
}


// --- MODELOS NEXT-AUTH ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String       @id @default(cuid())
  name               String?
  email              String?      @unique
  emailVerified      DateTime?
  image              String?
  rol                RoleUsuario  @default(TECNICO)
  accounts           Account[]
  sessions           Session[]
  ticketsAsignados   Ticket[]     @relation("TecnicoTickets")
  accionesRealizadas AccionTicket[]
  ticketsCreados     Ticket[]     @relation("CreadorTickets")
  equiposEntregados  EquipoEnPrestamo[] @relation("EntregadoPor")
  equiposRecibidos   EquipoEnPrestamo[] @relation("RecibidoPor")
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


// --- MODELOS DE NEGOCIO ---

model Empresa {
  id                   String    @id @default(uuid())
  nombre               String
  rut                  String    @unique
  logoUrl              String?
  telefono             String?
  email                String?
  estado               EstadoEmpresa @default(ACTIVA)
  
  // Relación uno-a-uno explícita con Direccion
  direccionPrincipalId String?   @unique
  direccionPrincipal   Direccion?  @relation("EmpresaDireccionPrincipal", fields: [direccionPrincipalId], references: [id], onDelete: SetNull)

  // Relaciones uno-a-muchos
  sucursales        Sucursal[]
  contactos         ContactoEmpresa[]
  equiposInventario EquipoInventario[]
  tickets           Ticket[]
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("empresas")
}

model Direccion {
  id        String   @id @default(uuid())
  calle     String
  numero    String
  depto     String?
  comunaId  String
  comuna    Comuna   @relation(fields: [comunaId], references: [id], onDelete: Restrict)
  
  // CORRECCIÓN: Relación inversa (back-relation) para la dirección principal de la empresa
  empresaComoPrincipal Empresa? @relation("EmpresaDireccionPrincipal")

  // Relaciones uno-a-muchos
  sucursales Sucursal[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("direcciones")
}

model Ticket {
  id                    String             @id @default(uuid())
  numeroCaso            Int                @unique
  titulo                String
  descripcionDetallada  String?
  tipoIncidente         String
  prioridad             PrioridadTicket    @default(MEDIA)
  estado                EstadoTicket       @default(ABIERTO)
  solicitanteNombre     String
  solicitanteTelefono   String?
  solicitanteCorreo     String?
  fechaCreacion         DateTime           @default(now())
  fechaSolucionEstimada DateTime?
  fechaSolucionReal     DateTime?
  equipoAfectado        String?
  
  // CORRECCIÓN: Relación inversa (back-relation) para la lista de tickets en Empresa
  empresaId             String?
  empresa               Empresa?           @relation(fields: [empresaId], references: [id])

  contactoId            String?
  contacto              ContactoEmpresa?   @relation("SolicitanteTickets", fields: [contactoId], references: [id])
  sucursalId            String?
  sucursal              Sucursal?          @relation(fields: [sucursalId], references: [id])
  tecnicoAsignadoId     String?
  tecnicoAsignado       User?              @relation("TecnicoTickets", fields: [tecnicoAsignadoId], references: [id])
  creadoPorUsuarioId    String 
  creadoPorUsuario      User               @relation("CreadorTickets", fields: [creadoPorUsuarioId], references: [id]) 

  acciones              AccionTicket[]
  equiposEnPrestamo     EquipoEnPrestamo[] @relation("TicketToEquipoEnPrestamo")
  
  updatedAt             DateTime           @updatedAt
}


// --- OTROS MODELOS ---
// (He revisado que el resto de tus modelos tengan las relaciones correctas)

model Pais {
  id        String   @id @default(uuid())
  nombre    String   @unique
  regiones  Region[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("paises")
}

model Region {
  id         String    @id @default(uuid())
  nombre     String
  paisId     String
  pais       Pais      @relation(fields: [paisId], references: [id], onDelete: Restrict)
  provincias Provincia[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([nombre, paisId])
  @@map("regiones")
}

model Provincia {
  id        String   @id @default(uuid())
  nombre    String
  regionId  String
  region    Region   @relation(fields: [regionId], references: [id], onDelete: Restrict)
  comunas   Comuna[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([nombre, regionId])
  @@map("provincias")
}

model Comuna {
  id          String    @id @default(uuid())
  nombre      String
  provinciaId String
  provincia   Provincia @relation(fields: [provinciaId], references: [id], onDelete: Restrict)
  direcciones Direccion[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([nombre, provinciaId])
  @@map("comunas")
}


model ContactoEmpresa {
  id                 String             @id @default(uuid())
  nombreCompleto     String
  email              String             @unique
  telefono           String
  cargo              String?
  
  // --- CAMPO NUEVO AÑADIDO ---
  estado             EstadoContacto     @default(ACTIVO)

  empresaId          String?
  empresa            Empresa?           @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  ubicacionId        String?
  ubicacion          Ubicacion?         @relation("UbicacionContactos", fields: [ubicacionId], references: [id])
  tickets            Ticket[]           @relation("SolicitanteTickets")
  equiposEnPrestamo  EquipoEnPrestamo[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@map("contactos_empresas")
}

model Sucursal {
  id          String      @id @default(uuid())
  nombre      String
  telefono    String?
  email       String?
  direccionId String      @unique
  direccion   Direccion   @relation(fields: [direccionId], references: [id], onDelete: Restrict) 
  empresaId   String?
  empresa     Empresa?    @relation(fields: [empresaId], references: [id], onDelete: Restrict) 
  ubicaciones Ubicacion[]
  tickets     Ticket[] 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@map("sucursales")
}

model Ubicacion {
  id                String             @id @default(uuid())
  nombreReferencial String?
  sucursalId        String
  sucursal          Sucursal           @relation(fields: [sucursalId], references: [id], onDelete: Restrict) 
  notas             String?
  contactos         ContactoEmpresa[]  @relation("UbicacionContactos")
  equiposInventario EquipoInventario[] @relation("EquipoUbicacionActual")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  @@map("ubicaciones")
}

model AccionTicket {
  id          String   @id @default(uuid())
  ticketId    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  descripcion String
  fechaAccion DateTime @default(now())
  usuarioId   String
  realizadaPor User    @relation(fields: [usuarioId], references: [id])
  tipo                 TipoAccion? @default(SEGUIMIENTO) 
  tiempoInvertidoMinutos Int?
  estadoTicketAnterior EstadoTicket?
  estadoTicketNuevo    EstadoTicket?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("AccionTicket")
}

model EquipoInventario {
  id                     String               @id @default(uuid())
  nombreDescriptivo      String
  identificadorUnico     String               @unique
  parentEquipoId      String?              @map("parent_equipo_id")
  parentEquipo        EquipoInventario?    @relation("ComponenteCompuesto", fields: [parentEquipoId], references: [id])
  componentes         EquipoInventario[]   @relation("ComponenteCompuesto")
  tipoEquipo             TipoEquipoInventario
  marca                  String?
  modelo                 String?
  descripcionAdicional   String?
  estadoEquipo           EstadoEquipoInventario @default(DISPONIBLE)
  fechaAdquisicion       DateTime?
  proveedor              String?
  ubicacionActualId      String?
  ubicacionActual        Ubicacion?           @relation("EquipoUbicacionActual", fields: [ubicacionActualId], references: [id])
  notasGenerales         String?
  prestamos              EquipoEnPrestamo[]
  panelVtsSerie          String?              @map("panel_vts_serie")
  pedalVtsSerie          String?              @map("pedal_vts_serie")
  biarticTipoDispositivo String?              @map("biartic_tipo_dispositivo")
  empresaId              String?
  empresa                Empresa?             @relation(fields: [empresaId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  @@map("equipos_inventario")
}

model EquipoEnPrestamo {
  id                        String           @id @default(uuid())
  equipoId                  String
  equipo                    EquipoInventario @relation(fields: [equipoId], references: [id])
  prestadoAContactoId       String
  prestadoAContacto         ContactoEmpresa  @relation(fields: [prestadoAContactoId], references: [id])
  personaResponsableEnSitio String
  fechaPrestamo             DateTime         @default(now())
  fechaDevolucionEstimada   DateTime
  fechaDevolucionReal       DateTime?
  estadoPrestamo            EstadoPrestamoEquipo @default(PRESTADO)
  ticketId                  String?
  ticketAsociado            Ticket?          @relation("TicketToEquipoEnPrestamo", fields: [ticketId], references: [id])
  notasPrestamo             String?
  notasDevolucion           String?
  entregadoPorUsuarioId     String?
  entregadoPorUsuario       User?            @relation("EntregadoPor", fields: [entregadoPorUsuarioId], references: [id])
  recibidoPorUsuarioId      String?
  recibidoPorUsuario        User?            @relation("RecibidoPor", fields: [recibidoPorUsuarioId], references: [id])
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
}