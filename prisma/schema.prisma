// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum RoleUsuario {
  ADMIN
  TECNICO
  VISUALIZADOR
  CLIENTE
}

enum PrioridadTicket {
  BAJA
  MEDIA
  ALTA
  URGENTE
}

enum EstadoTicket {
  ABIERTO
  EN_PROGRESO
  PENDIENTE_TERCERO
  PENDIENTE_CLIENTE
  RESUELTO
  CERRADO
  CANCELADO
}

enum TipoEquipoInventario {
  VTS
  BIARTIC
  NOTEBOOK
  CELULAR
  TABLET
  IMPRESORA
  MONITOR
  PERIFERICO
  OTRO
}

enum EstadoEquipoInventario {
  DISPONIBLE
  EN_USO_INTERNO
  PRESTADO
  EN_MANTENIMIENTO
  DE_BAJA
  PERDIDO_ROBADO
}

enum EstadoPrestamoEquipo {
  PRESTADO
  DEVUELTO
  ATRASADO
  RENOVADO
  PERDIDO_POR_CLIENTE
}


// --- MODELOS NEXT-AUTH ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String       @id @default(cuid())
  name               String?
  email              String?      @unique
  emailVerified      DateTime?
  image              String?
  rol                RoleUsuario  @default(TECNICO)
  accounts           Account[]
  sessions           Session[]
  ticketsAsignados   Ticket[]     @relation("TecnicoTickets")
  accionesRealadas AccionTicket[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// --- MODELOS DE NEGOCIO Y GEOGRAFÍA ---

model Pais {
  id        String   @id @default(uuid())
  nombre    String   @unique
  regiones  Region[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("paises")
}

model Region {
  id         String    @id @default(uuid())
  nombre     String
  paisId     String
  pais       Pais      @relation(fields: [paisId], references: [id], onDelete: Cascade)
  provincias Provincia[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([nombre, paisId])
  @@map("regiones")
}

model Provincia {
  id        String   @id @default(uuid())
  nombre    String
  regionId  String
  region    Region   @relation(fields: [regionId], references: [id], onDelete: Cascade)
  comunas   Comuna[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([nombre, regionId])
  @@map("provincias")
}

model Comuna {
  id          String    @id @default(uuid())
  nombre      String
  provinciaId String
  provincia   Provincia @relation(fields: [provinciaId], references: [id], onDelete: Cascade)
  direcciones Direccion[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([nombre, provinciaId])
  @@map("comunas")
}

// --- MODELO EMPRESA ---
model Empresa {
  id                String             @id @default(uuid())
  nombre            String
  rut               String             @unique
  logoUrl           String?
  telefono          String?
  email             String?            
  
  direccion         Direccion?         @relation("EmpresaToDireccion") 
  sucursales        Sucursal[]
  contactos         ContactoEmpresa[]
  equiposInventario EquipoInventario[]
  tickets           Ticket[]           @relation("TicketEmpresa")
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("empresas")
}

// --- MODELO DIRECCION (AJUSTADO: calle, numero y comunaId ahora son String - REQUERIDOS) ---
model Direccion {
  id        String   @id @default(uuid())
  calle     String   // CAMBIO CRÍTICO: Ahora es REQUERIDO
  numero    String   // CAMBIO CRÍTICO: Ahora es REQUERIDO
  depto     String?
  comunaId  String   // CAMBIO CRÍTICO: Ahora es REQUERIDO (como estaba originalmente)
  comuna    Comuna   @relation(fields: [comunaId], references: [id], onDelete: Cascade) // Relación obligatoria
  
  empresaId String   @unique 
  empresa   Empresa  @relation("EmpresaToDireccion", fields: [empresaId], references: [id], onDelete: Cascade) 

  sucursales Sucursal[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("direcciones")
}


model ContactoEmpresa {
  id                 String             @id @default(uuid())
  nombreCompleto     String
  email              String             @unique
  telefono           String
  cargo              String?
  empresaId          String?
  empresa            Empresa?           @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  ubicacionId        String?
  ubicacion          Ubicacion?         @relation("UbicacionContactos", fields: [ubicacionId], references: [id])
  tickets            Ticket[]           @relation("SolicitanteTickets")
  equiposEnPrestamo  EquipoEnPrestamo[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@map("contactos_empresas")
}

model Sucursal {
  id          String      @id @default(uuid())
  nombre      String
  telefono    String?
  email       String?
  direccionId String      @unique
  direccion   Direccion   @relation(fields: [direccionId], references: [id], onDelete: Cascade)
  empresaId   String?
  empresa     Empresa?    @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  ubicaciones Ubicacion[]
  tickets     Ticket[] 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@map("sucursales")
}

model Ubicacion {
  id                String             @id @default(uuid())
  nombreReferencial String?
  sucursalId        String
  sucursal          Sucursal           @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  notas             String?
  contactos         ContactoEmpresa[]  @relation("UbicacionContactos")
  equiposInventario EquipoInventario[] @relation("EquipoUbicacionActual")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  @@map("ubicaciones")
}

// --- MODELO TICKET ---
model Ticket {
  id                    String             @id @default(uuid())
  numeroCaso            Int                @unique
  titulo                String
  descripcionDetallada  String?
  tipoIncidente         String
  prioridad             PrioridadTicket    @default(MEDIA)
  estado                EstadoTicket       @default(ABIERTO)
  solicitanteNombre     String
  solicitanteTelefono   String?
  solicitanteCorreo     String?
  contactoId            String?
  contacto              ContactoEmpresa?   @relation("SolicitanteTickets", fields: [contactoId], references: [id])
  empresaId             String?
  empresa               Empresa?           @relation("TicketEmpresa", fields: [empresaId], references: [id])
  sucursalId            String?
  sucursal              Sucursal?          @relation(fields: [sucursalId], references: [id])
  tecnicoAsignadoId     String?
  tecnicoAsignado       User?              @relation("TecnicoTickets", fields: [tecnicoAsignadoId], references: [id])
  acciones              AccionTicket[]
  equiposEnPrestamo     EquipoEnPrestamo[] @relation("TicketToEquipoEnPrestamo")
  fechaCreacion         DateTime           @default(now())
  fechaSolucionEstimada DateTime?
  fechaSolucionReal     DateTime?
  updatedAt             DateTime           @updatedAt
  equipoAfectado        String?
}

model AccionTicket {
  id           String   @id @default(uuid())
  ticketId     String
  ticket       Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  descripcion  String
  fechaAccion  DateTime @default(now())
  usuarioId    String
  realizadaPor User     @relation(fields: [usuarioId], references: [id])
  categoria    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@map("AccionTicket")
}

model EquipoInventario {
  id                     String               @id @default(uuid())
  nombreDescriptivo      String
  identificadorUnico     String               @unique
  tipoEquipo             TipoEquipoInventario
  marca                  String?
  modelo                 String?
  descripcionAdicional   String?
  estadoEquipo           EstadoEquipoInventario @default(DISPONIBLE)
  fechaAdquisicion       DateTime?
  proveedor              String?
  ubicacionActualId      String?
  ubicacionActual        Ubicacion?           @relation("EquipoUbicacionActual", fields: [ubicacionActualId], references: [id])
  notasGenerales         String?
  prestamos              EquipoEnPrestamo[]
  panelVtsSerie          String?              @map("panel_vts_serie")
  pedalVtsSerie          String?              @map("pedal_vts_serie")
  biarticTipoDispositivo String?              @map("biartic_tipo_dispositivo")
  empresaId              String?
  empresa                Empresa?             @relation(fields: [empresaId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  @@map("equipos_inventario")
}

model EquipoEnPrestamo {
  id                        String           @id @default(uuid())
  equipoId                  String
  equipo                    EquipoInventario @relation(fields: [equipoId], references: [id])
  prestadoAContactoId       String
  prestadoAContacto         ContactoEmpresa  @relation(fields: [prestadoAContactoId], references: [id])
  personaResponsableEnSitio String
  fechaPrestamo             DateTime         @default(now())
  fechaDevolucionEstimada   DateTime
  fechaDevolucionReal       DateTime?
  estadoPrestamo            EstadoPrestamoEquipo @default(PRESTADO)
  ticketId                  String?
  ticketAsociado            Ticket?          @relation("TicketToEquipoEnPrestamo", fields: [ticketId], references: [id])
  notasPrestamo             String?
  notasDevolucion           String?
  entregadoPorUsuarioId     String?
  recibidoPorUsuarioId      String?
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
}
