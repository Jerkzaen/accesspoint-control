// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // O tu base de datos preferida: postgresql, mysql, etc.
  url      = env("DATABASE_URL")
}

// Modelos para NextAuth Prisma Adapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Removido @db.Text
  access_token      String? // Removido @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // Removido @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts") 
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions") 
}

model User {
  id            String    @id @default(cuid()) 
  name          String?   
  email         String?   @unique 
  emailVerified DateTime? 
  image         String?   
  
  rol           RoleUsuario @default(TECNICO) 

  accounts      Account[]
  sessions      Session[]

  ticketsAsignados    Ticket[]      @relation("TecnicoTickets")
  accionesRealizadas  AccionTicket[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users") 
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens") 
}

// --- Tus modelos existentes ---

enum RoleUsuario {
  ADMIN
  TECNICO
  VISUALIZADOR
}

model EmpresaCliente {
  id            String    @id @default(uuid())
  nombre        String    @unique
  rut           String?   @unique
  direccion     String?
  telefono      String?
  email         String?   @unique
  logoUrl       String?
  contactos     Cliente[]
  tickets       Ticket[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@map("empresas_clientes")
}

model Cliente {
  id                String              @id @default(uuid())
  nombreCompleto    String
  email             String?             @unique
  telefono          String?
  cargo             String?
  empresaCliente    EmpresaCliente      @relation(fields: [empresaClienteId], references: [id])
  empresaClienteId  String
  ubicacion         Ubicacion?          @relation(fields: [ubicacionId], references: [id])
  ubicacionId       String?
  ticketsSolicitados Ticket[]           @relation("SolicitanteTickets")
  equiposEnPrestamo EquipoEnPrestamo[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  @@map("contactos_clientes")
}

model Ubicacion {
  id                  String    @id @default(uuid())
  nombreReferencial   String?
  direccionCompleta   String
  ciudad              String?
  region              String?
  pais                String?
  notas               String?
  contactos           Cliente[]
  tickets             Ticket[]
  equiposInventario   EquipoInventario[] @relation("EquipoUbicacionActual")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Ticket {
  id                    String        @id @default(uuid())
  numeroCaso            Int           @unique
  titulo                String
  descripcionDetallada  String?
  tipoIncidente         String        
  prioridad             PrioridadTicket @default(MEDIA)
  estado                EstadoTicket  @default(ABIERTO)
  
  solicitanteNombre     String        
  solicitanteTelefono   String?       
  solicitanteCorreo     String?       
  solicitanteCliente    Cliente?      @relation(name: "SolicitanteTickets", fields: [solicitanteClienteId], references: [id])
  solicitanteClienteId  String?       

  empresaCliente        EmpresaCliente? @relation(fields: [empresaClienteId], references: [id])
  empresaClienteId      String?       
  
  ubicacion             Ubicacion?    @relation(fields: [ubicacionId], references: [id])
  ubicacionId           String?       

  tecnicoAsignado       User?         @relation(name: "TecnicoTickets", fields: [tecnicoAsignadoId], references: [id]) 
  tecnicoAsignadoId     String?       

  acciones              AccionTicket[] 

  fechaCreacion         DateTime      @default(now())
  fechaSolucionEstimada DateTime?     // Cambiado desde fechaSolucion a fechaSolucionEstimada
  fechaSolucionReal     DateTime?     // Nuevo campo para la fecha real de soluci√≥n
  updatedAt             DateTime      @updatedAt
  
  equiposEnPrestamo     EquipoEnPrestamo[]
}

model AccionTicket {
  id            String   @id @default(uuid())
  ticket        Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId      String
  descripcion   String
  fechaAccion   DateTime @default(now())
  realizadaPor  User     @relation(fields: [usuarioId], references: [id]) 
  usuarioId     String   
}

enum PrioridadTicket {
  BAJA
  MEDIA
  ALTA
  URGENTE
}

enum EstadoTicket {
  ABIERTO
  EN_PROGRESO
  PENDIENTE_TERCERO
  PENDIENTE_CLIENTE
  RESUELTO
  CERRADO
  CANCELADO
}

model EquipoInventario {
  id                        String              @id @default(uuid())
  nombreDescriptivo         String              
  identificadorUnico        String              @unique 
  tipoEquipo                TipoEquipoInventario
  marca                     String?
  modelo                    String?
  descripcionAdicional      String?
  estadoEquipo              EstadoEquipoInventario @default(DISPONIBLE)
  fechaAdquisicion          DateTime?
  proveedor                 String?
  
  ubicacionActual           Ubicacion?          @relation(name: "EquipoUbicacionActual", fields: [ubicacionActualId], references: [id])
  ubicacionActualId         String?             

  notasGenerales            String?
  prestamos                 EquipoEnPrestamo[]  
  
  panelVtsSerie             String?             @map("panel_vts_serie")
  pedalVtsSerie             String?             @map("pedal_vts_serie")
  biarticTipoDispositivo    String?             @map("biartic_tipo_dispositivo") 

  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
}

enum TipoEquipoInventario {
  VTS         
  BIARTIC     
  NOTEBOOK
  CELULAR
  TABLET
  IMPRESORA
  MONITOR
  PERIFERICO  
  OTRO
}

enum EstadoEquipoInventario {
  DISPONIBLE
  EN_USO_INTERNO
  PRESTADO
  EN_MANTENIMIENTO
  DE_BAJA
  PERDIDO_ROBADO
}

model EquipoEnPrestamo {
  id                        String    @id @default(uuid())
  equipo                    EquipoInventario @relation(fields: [equipoId], references: [id])
  equipoId                  String
  
  prestadoAContacto         Cliente   @relation(fields: [prestadoAContactoId], references: [id])
  prestadoAContactoId       String    
  personaResponsableEnSitio String    

  fechaPrestamo             DateTime  @default(now())
  fechaDevolucionEstimada   DateTime
  fechaDevolucionReal       DateTime?
  
  estadoPrestamo            EstadoPrestamoEquipo @default(PRESTADO)
  
  ticketAsociado            Ticket?   @relation(fields: [ticketId], references: [id])
  ticketId                  String?   

  notasPrestamo             String?   
  notasDevolucion           String?   

  entregadoPorUsuarioId     String?   
  recibidoPorUsuarioId      String?   

  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}

enum EstadoPrestamoEquipo {
  PRESTADO
  DEVUELTO
  ATRASADO 
  RENOVADO
  PERDIDO_POR_CLIENTE
}

